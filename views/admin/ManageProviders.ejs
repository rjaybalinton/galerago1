<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Manage Providers | Admin Dashboard</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        body {
            margin: 0;
            padding: 0;
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen, Ubuntu, Cantarell, "Open Sans", "Helvetica Neue", sans-serif;
            background-color: #f5f5f5;
            display: flex;
        }

        /* Sidebar styles */
        .sidebar {
            width: 235px;
            background-color: #1e3a8a;
            color: white;
            height: 100vh;
            position: fixed;
            left: 0;
            top: 0;
            overflow-y: auto;
        }

        .sidebar-header {
            padding: 20px;
            font-size: 24px;
            font-weight: bold;
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
            margin-bottom: 20px;
        }

        .sidebar-menu {
            list-style: none;
            padding: 0;
            margin: 0;
        }

        .sidebar-menu li a {
            display: block;
            padding: 15px 20px;
            color: white;
            text-decoration: none;
            transition: background-color 0.3s;
        }

        .sidebar-menu li a:hover {
            background-color: rgba(255, 255, 255, 0.1);
        }

        .sidebar-menu li a.active {
            background-color: rgba(255, 255, 255, 0.2);
        }

        .logout-btn {
            margin: 20px;
            background-color: #dc3545;
            color: white;
            border: none;
            padding: 10px;
            width: calc(100% - 40px);
            text-align: center;
            border-radius: 4px;
            cursor: pointer;
            text-decoration: none;
            display: block;
        }

        .logout-btn:hover {
            background-color: #c82333;
            color: white;
        }

        /* Main content styles */
        .main-content {
            margin-left: 235px;
            width: calc(100% - 235px);
            padding: 0;
        }

        .header {
            background-color: white;
            padding: 15px 20px;
            border-bottom: 1px solid #e0e0e0;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .header h1 {
            margin: 0;
            font-size: 24px;
            font-weight: 500;
        }

        .content {
            padding: 20px;
        }

        .card {
            background-color: white;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
            margin-bottom: 20px;
            overflow: hidden;
        }

        .card-header {
            padding: 15px 20px;
            border-bottom: 1px solid #e0e0e0;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .card-title {
            margin: 0;
            font-size: 18px;
            font-weight: 500;
        }

        .card-body {
            padding: 20px;
        }

        /* Table styles */
        .table {
            width: 100%;
            border-collapse: collapse;
        }

        .table th {
            text-align: left;
            padding: 12px 15px;
            border-bottom: 1px solid #e0e0e0;
            font-weight: 500;
        }

        .table td {
            padding: 12px 15px;
            border-bottom: 1px solid #e0e0e0;
        }

        .table tr:last-child td {
            border-bottom: none;
        }

        /* Button styles */
        .btn-primary {
            background-color: #0d6efd;
            border-color: #0d6efd;
        }

        .btn-success {
            background-color: #198754;
            border-color: #198754;
        }

        .btn-danger {
            background-color: #dc3545;
            border-color: #dc3545;
        }

        /* Badge styles */
        .badge {
            padding: 5px 10px;
            border-radius: 4px;
            font-weight: 500;
        }

        .badge-entry {
            background-color: #d1e7dd;
            color: #0f5132;
        }

        .badge-activity {
            background-color: #cfe2ff;
            color: #084298;
        }

        .badge-suspended {
            background-color: #f8d7da;
            color: #842029;
        }

        /* Modal styles */
        .modal-header {
            border-bottom: 1px solid #e0e0e0;
            padding: 15px 20px;
        }

        .modal-title {
            font-size: 18px;
            font-weight: 500;
        }

        .modal-body {
            padding: 20px;
        }

        .modal-footer {
            border-top: 1px solid #e0e0e0;
            padding: 15px 20px;
        }

        /* Form styles */
        .form-label {
            font-weight: 500;
            margin-bottom: 5px;
        }

        .form-control {
            border: 1px solid #ced4da;
            border-radius: 4px;
            padding: 8px 12px;
        }

        .form-control:focus {
            border-color: #86b7fe;
            box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.25);
        }

        /* Filter styles */
        .filters {
            display: flex;
            gap: 15px;
            margin-bottom: 20px;
        }

        .filter-item {
            flex: 1;
        }

        /* Action buttons */
        .action-buttons {
            display: flex;
            gap: 10px;
            justify-content: center;
        }

        .action-btn {
            padding: 5px 10px;
            border-radius: 4px;
            cursor: pointer;
            text-decoration: none;
            font-size: 14px;
        }

        .edit-btn {
            background-color: #cfe2ff;
            color: #084298;
        }

        .delete-btn {
            background-color: #f8d7da;
            color: #842029;
        }

        .suspend-btn {
            background-color: #fff3cd;
            color: #664d03;
        }

        .activate-btn {
            background-color: #d1e7dd;
            color: #0f5132;
        }

        /* Notification */
        .notification {
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 15px 20px;
            border-radius: 4px;
            color: white;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
            z-index: 9999;
            opacity: 0;
            transform: translateY(-20px);
            transition: all 0.3s;
        }

        .notification.show {
            opacity: 1;
            transform: translateY(0);
        }

        .notification-success {
            background-color: #198754;
        }

        .notification-error {
            background-color: #dc3545;
        }

        /* Add Provider Button */
        .add-provider-btn {
            background-color: #0d6efd;
            color: white;
            border: none;
            padding: 8px 16px;
            border-radius: 4px;
            cursor: pointer;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .add-provider-btn:hover {
            background-color: #0b5ed7;
        }

        /* Loading spinner */
        .spinner-border {
            width: 1.5rem;
            height: 1.5rem;
            border-width: 0.2em;
        }

        /* Pagination */
        .pagination {
            display: flex;
            justify-content: center;
            gap: 5px;
            margin-top: 20px;
        }

        .page-link {
            padding: 5px 10px;
            border: 1px solid #dee2e6;
            border-radius: 4px;
            color: #0d6efd;
            background-color: white;
            cursor: pointer;
        }

        .page-link:hover {
            background-color: #e9ecef;
        }

        .page-item.disabled .page-link {
            color: #6c757d;
            pointer-events: none;
            background-color: #e9ecef;
        }

        .page-item.active .page-link {
            background-color: #0d6efd;
            color: white;
            border-color: #0d6efd;
        }

        /* Suspended provider row */
        .suspended-row {
            background-color: #fff8f8;
        }

        .suspended-text {
            text-decoration: line-through;
            color: #6c757d;
        }

        /* Responsive */
        @media (max-width: 768px) {
            .sidebar {
                width: 100%;
                height: auto;
                position: relative;
            }
            
            .main-content {
                margin-left: 0;
                width: 100%;
            }
            
            .filters {
                flex-direction: column;
            }
        }
    </style>
</head>
<body class="bg-gray-100">
    <!-- Sidebar -->
    <div class="sidebar">
        <div class="sidebar-header">
            Admin Panel
        </div>
        <ul class="sidebar-menu">
            <li><a href="/admin/dashboard">Dashboard</a></li>
            <li><a href="/admin/manage-providers" class="active">Manage Providers</a></li>
            <li><a href="/admin/manage-tourists">Manage Tourists</a></li>
            <li><a href="/admin/manage-location">Tourist Locations</a></li>
            <li><a href="/admin/manage-packages">Manage Packages</a></li>
            <li><a href="/admin/reports">Reports</a></li>
            <li><a href="/admin/settings">Settings</a></li>
        </ul>
        <a href="/logout" class="logout-btn">Logout</a>
    </div>

    <!-- Main Content -->
    <div class="main-content">
        <div class="header">
            <h1>Manage Providers</h1>
            <div class="user-info">
                <%= user.username %>
            </div>
        </div>

        <div class="content">
            <!-- Filters and Add Button -->
            <div class="card">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center">
                        <div class="filters">
                            <div class="filter-item">
                                <label for="provider-type-filter" class="form-label">Provider Type</label>
                                <select id="provider-type-filter" class="form-select">
                                    <option value="all">All Types</option>
                                    <option value="entry_provider">Entry Provider</option>
                                    <option value="activity_provider">Activity Provider</option>
                                </select>
                            </div>
                            <div class="filter-item">
                                <label for="status-filter" class="form-label">Status</label>
                                <select id="status-filter" class="form-select">
                                    <option value="all">All Statuses</option>
                                    <option value="active">Active</option>
                                    <option value="suspended">Suspended</option>
                                </select>
                            </div>
                            <div class="filter-item">
                                <label for="search-provider" class="form-label">Search</label>
                                <input type="text" id="search-provider" class="form-control" placeholder="Search providers...">
                            </div>
                        </div>
                        <button id="add-provider-button" class="add-provider-btn">
                            <i class="fas fa-plus"></i> Add Service Provider
                        </button>
                    </div>
                </div>
            </div>

            <!-- Providers Table -->
            <div class="card">
                <div class="card-header">
                    <h2 class="card-title">Service Providers</h2>
                    <span id="providers-count" class="text-muted">Loading providers...</span>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table">
                            <thead>
                                <tr>
                                    <th>Provider</th>
                                    <th>Contact</th>
                                    <th>Type</th>
                                    <th>Status</th>
                                    <th>Registered</th>
                                    <th class="text-center">Actions</th>
                                </tr>
                            </thead>
                            <tbody id="providers-table-body">
                                <tr>
                                    <td colspan="6" class="text-center py-4">
                                        <div class="spinner-border text-primary" role="status">
                                            <span class="visually-hidden">Loading...</span>
                                        </div>
                                        <p class="mt-2 text-muted">Loading providers...</p>
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                    <div class="d-flex justify-content-between align-items-center mt-3">
                        <div>
                            <span id="pagination-info" class="text-muted">Showing 0 to 0 of 0 entries</span>
                        </div>
                        <div class="pagination">
                            <div class="page-item disabled" id="prev-page">
                                <button class="page-link">Previous</button>
                            </div>
                            <div class="page-item disabled" id="next-page">
                                <button class="page-link">Next</button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Add/Edit Provider Modal -->
    <div class="modal fade" id="provider-modal" tabindex="-1" aria-labelledby="provider-modal-label" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="modal-title">Add New Service Provider</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="provider-form">
                        <input type="hidden" id="provider-id" name="provider_id">
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label for="username" class="form-label">Username</label>
                                <input type="text" class="form-control" id="username" name="username" required>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label for="email" class="form-label">Email</label>
                                <input type="email" class="form-control" id="email" name="email" required>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label for="first_name" class="form-label">First Name</label>
                                <input type="text" class="form-control" id="first_name" name="first_name" required>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label for="last_name" class="form-label">Last Name</label>
                                <input type="text" class="form-control" id="last_name" name="last_name" required>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label for="contact_number" class="form-label">Contact Number</label>
                                <input type="tel" class="form-control" id="contact_number" name="contact_number" required>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label for="provider_type" class="form-label">Provider Type</label>
                                <select class="form-select" id="provider_type" name="provider_type" required>
                                    <option value="">Select Type</option>
                                    <option value="entry_provider">Entry Provider</option>
                                    <option value="activity_provider">Activity Provider</option>
                                </select>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label for="gender" class="form-label">Gender</label>
                                <select class="form-select" id="gender" name="gender" required>
                                    <option value="">Select Gender</option>
                                    <option value="Male">Male</option>
                                    <option value="Female">Female</option>
                                    <option value="Other">Other</option>
                                </select>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label for="date_of_birth" class="form-label">Date of Birth</label>
                                <input type="date" class="form-control" id="date_of_birth" name="date_of_birth">
                            </div>
                        </div>
                        <div class="mb-3">
                            <label for="address" class="form-label">Address</label>
                            <textarea class="form-control" id="address" name="address" rows="2"></textarea>
                        </div>
                        <div class="mb-3">
                            <label for="nationality" class="form-label">Nationality</label>
                            <input type="text" class="form-control" id="nationality" name="nationality">
                        </div>
                        <div class="mb-3" id="password-fields">
                            <label for="password" class="form-label">Password</label>
                            <input type="password" class="form-control" id="password" name="password">
                            <div class="form-text">Leave blank to keep current password (when editing)</div>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary" id="submit-provider">Save Provider</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Delete Confirmation Modal -->
    <div class="modal fade" id="delete-modal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Confirm Deletion</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to delete this provider? This action cannot be undone.</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-danger" id="confirm-delete">Delete</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Suspend Confirmation Modal -->
    <div class="modal fade" id="suspend-modal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="suspend-modal-title">Suspend Provider</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p id="suspend-modal-message">Are you sure you want to suspend this provider? They will not be able to log in or provide services while suspended.</p>
                    <div class="mb-3">
                        <label for="suspension-reason" class="form-label">Reason for suspension (optional)</label>
                        <textarea class="form-control" id="suspension-reason" rows="3" placeholder="Enter reason for suspension..."></textarea>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-warning" id="confirm-suspend">Suspend</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Notification -->
    <div id="notification" class="notification">
        <span id="notification-message"></span>
    </div>

    <!-- Bootstrap Bundle with Popper -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
    
    <script>
        // Global variables
        let providers = [];
        let currentPage = 1;
        let itemsPerPage = 10;
        let filteredProviders = [];
        let currentProviderId = null;
        let providerTypeFilter = 'all';
        let statusFilter = 'all';
        let searchQuery = '';
        
        // Bootstrap modal instances
        let providerModal;
        let deleteModal;
        let suspendModal;

        // DOM Elements
        document.addEventListener('DOMContentLoaded', () => {
            // Initialize Bootstrap modals
            providerModal = new bootstrap.Modal(document.getElementById('provider-modal'));
            deleteModal = new bootstrap.Modal(document.getElementById('delete-modal'));
            suspendModal = new bootstrap.Modal(document.getElementById('suspend-modal'));
            
            // Get DOM elements
            const providersTableBody = document.getElementById('providers-table-body');
            const providersCount = document.getElementById('providers-count');
            const paginationInfo = document.getElementById('pagination-info');
            const prevPageBtn = document.getElementById('prev-page');
            const nextPageBtn = document.getElementById('next-page');
            const addProviderBtn = document.getElementById('add-provider-button');
            const providerForm = document.getElementById('provider-form');
            const modalTitle = document.getElementById('modal-title');
            const providerTypeFilterSelect = document.getElementById('provider-type-filter');
            const statusFilterSelect = document.getElementById('status-filter');
            const searchProviderInput = document.getElementById('search-provider');
            const submitProviderBtn = document.getElementById('submit-provider');
            const confirmDeleteBtn = document.getElementById('confirm-delete');
            const confirmSuspendBtn = document.getElementById('confirm-suspend');
            const suspendModalTitle = document.getElementById('suspend-modal-title');
            const suspendModalMessage = document.getElementById('suspend-modal-message');
            
            // Initialize
            fetchProviders();
            setupEventListeners();
            
            // Setup event listeners
            function setupEventListeners() {
                // Add provider button
                addProviderBtn.addEventListener('click', () => {
                    openAddProviderModal();
                });
                
                // Submit provider form
                submitProviderBtn.addEventListener('click', () => {
                    if (providerForm.checkValidity()) {
                        submitProviderForm();
                    } else {
                        providerForm.reportValidity();
                    }
                });
                
                // Confirm delete
                confirmDeleteBtn.addEventListener('click', () => {
                    deleteProvider(currentProviderId);
                });
                
                // Confirm suspend/activate
                confirmSuspendBtn.addEventListener('click', () => {
                    console.log("Confirm suspend button clicked for provider:", currentProviderId);
                    const reason = document.getElementById('suspension-reason').value;
                    toggleProviderSuspension(currentProviderId, reason);
                });
                
                // Pagination
                prevPageBtn.querySelector('button').addEventListener('click', (e) => {
                    e.preventDefault();
                    if (!prevPageBtn.classList.contains('disabled') && currentPage > 1) {
                        currentPage--;
                        renderProviders();
                    }
                });
                
                nextPageBtn.querySelector('button').addEventListener('click', (e) => {
                    e.preventDefault();
                    const totalPages = Math.ceil(filteredProviders.length / itemsPerPage);
                    if (!nextPageBtn.classList.contains('disabled') && currentPage < totalPages) {
                        currentPage++;
                        renderProviders();
                    }
                });
                
                // Filters
                providerTypeFilterSelect.addEventListener('change', () => {
                    providerTypeFilter = providerTypeFilterSelect.value;
                    currentPage = 1;
                    applyFilters();
                });
                
                statusFilterSelect.addEventListener('change', () => {
                    statusFilter = statusFilterSelect.value;
                    currentPage = 1;
                    applyFilters();
                });
                
                searchProviderInput.addEventListener('input', () => {
                    searchQuery = searchProviderInput.value.toLowerCase();
                    currentPage = 1;
                    applyFilters();
                });
            }
            
            // Fetch providers from API
            async function fetchProviders() {
                try {
                    const response = await fetch('/admin/providers');
                    if (!response.ok) {
                        throw new Error(`HTTP error! Status: ${response.status}`);
                    }
                    
                    providers = await response.json();
                    applyFilters();
                } catch (error) {
                    console.error('Error fetching providers:', error);
                    providersTableBody.innerHTML = `
                        <tr>
                            <td colspan="6" class="text-center py-4 text-danger">
                                <i class="fas fa-exclamation-circle fa-2x mb-3"></i>
                                <p>Error loading providers: ${error.message}</p>
                            </td>
                        </tr>
                    `;
                    providersCount.textContent = 'Error loading providers';
                }
            }
            
            // Apply filters to providers
            function applyFilters() {
                filteredProviders = providers.filter(provider => {
                    // Filter by provider type
                    if (providerTypeFilter !== 'all' && provider.provider_type !== providerTypeFilter) {
                        return false;
                    }
                    
                    // Filter by status
                    if (statusFilter === 'active' && provider.is_suspended) {
                        return false;
                    }
                    
                    if (statusFilter === 'suspended' && !provider.is_suspended) {
                        return false;
                    }
                    
                    // Filter by search query
                    if (searchQuery) {
                        const searchFields = [
                            provider.username,
                            provider.email,
                            provider.first_name,
                            provider.last_name,
                            provider.contact_number
                        ].map(field => (field || '').toLowerCase());
                        
                        return searchFields.some(field => field.includes(searchQuery));
                    }
                    
                    return true;
                });
                
                renderProviders();
            }
            
            // Render providers table
            function renderProviders() {
                const startIndex = (currentPage - 1) * itemsPerPage;
                const endIndex = startIndex + itemsPerPage;
                const currentProviders = filteredProviders.slice(startIndex, endIndex);
                
                if (currentProviders.length === 0) {
                    providersTableBody.innerHTML = `
                        <tr>
                            <td colspan="6" class="text-center py-4">
                                <i class="fas fa-info-circle fa-2x mb-3 text-muted"></i>
                                <p class="text-muted">No providers found.</p>
                            </td>
                        </tr>
                    `;
                } else {
                    providersTableBody.innerHTML = currentProviders.map(provider => `
                        <tr class="${provider.is_suspended ? 'suspended-row' : ''}">
                            <td>
                                <div class="d-flex flex-column">
                                    <span class="${provider.is_suspended ? 'suspended-text' : 'fw-bold'}">${provider.username}</span>
                                    <span class="text-muted small">${provider.first_name} ${provider.last_name}</span>
                                </div>
                            </td>
                            <td>
                                <div class="d-flex flex-column">
                                    <span class="${provider.is_suspended ? 'suspended-text' : ''}">${provider.email}</span>
                                    <span class="text-muted small">${provider.contact_number}</span>
                                </div>
                            </td>
                            <td>
                                <span class="badge ${provider.provider_type === 'entry_provider' ? 'badge-entry' : 'badge-activity'}">
                                    ${formatProviderType(provider.provider_type)}
                                </span>
                            </td>
                            <td>
                                <span class="badge ${provider.is_suspended ? 'badge-suspended' : 'badge-entry'}">
                                    ${provider.is_suspended ? 'Suspended' : 'Active'}
                                </span>
                            </td>
                            <td>${formatDate(provider.created_at)}</td>
                            <td class="text-center">
                                <div class="action-buttons">
                                    <a href="javascript:void(0)" class="action-btn edit-btn" onclick="editProvider(${provider.id})">
                                        <i class="fas fa-edit"></i> Edit
                                    </a>
                                    ${provider.is_suspended ? 
                                        `<a href="javascript:void(0)" class="action-btn activate-btn" onclick="confirmActivateProvider(${provider.id})">
                                            <i class="fas fa-user-check"></i> Activate
                                        </a>` : 
                                        `<a href="javascript:void(0)" class="action-btn suspend-btn" onclick="confirmSuspendProvider(${provider.id})">
                                            <i class="fas fa-user-slash"></i> Suspend
                                        </a>`
                                    }
                                    <a href="javascript:void(0)" class="action-btn delete-btn" onclick="confirmDeleteProvider(${provider.id})">
                                        <i class="fas fa-trash-alt"></i> Delete
                                    </a>
                                </div>
                            </td>
                        </tr>
                    `).join('');
                }
                
                // Update providers count
                providersCount.textContent = `Total: ${filteredProviders.length} providers`;
                
                // Update pagination info
                paginationInfo.textContent = filteredProviders.length > 0 
                    ? `Showing ${startIndex + 1} to ${Math.min(endIndex, filteredProviders.length)} of ${filteredProviders.length} entries`
                    : 'Showing 0 to 0 of 0 entries';
                
                // Update pagination buttons
                const totalPages = Math.ceil(filteredProviders.length / itemsPerPage);
                
                prevPageBtn.classList.toggle('disabled', currentPage === 1);
                nextPageBtn.classList.toggle('disabled', currentPage === totalPages || totalPages === 0);
            }
            
            // Format provider type for display
            function formatProviderType(type) {
                switch (type) {
                    case 'entry_provider':
                        return 'Entry Provider';
                    case 'activity_provider':
                        return 'Activity Provider';
                    default:
                        return type;
                }
            }
            
            // Format date for display
            function formatDate(dateString) {
                if (!dateString) return 'N/A';
                const date = new Date(dateString);
                return date.toLocaleDateString('en-US', { year: 'numeric', month: 'short', day: 'numeric' });
            }
            
            // Open add provider modal
            function openAddProviderModal() {
                modalTitle.textContent = 'Add New Service Provider';
                providerForm.reset();
                document.getElementById('provider-id').value = '';
                document.getElementById('password').required = true;
                document.getElementById('password-fields').style.display = 'block';
                
                providerModal.show();
            }
            
            // Submit provider form
            async function submitProviderForm() {
                const formData = new FormData(providerForm);
                const providerId = formData.get('provider_id');
                
                // Convert FormData to JSON
                const providerData = {};
                formData.forEach((value, key) => {
                    // Skip empty password when editing
                    if (key === 'password' && !value && providerId) {
                        return;
                    }
                    providerData[key] = value;
                });
                
                try {
                    const url = providerId 
                        ? `/admin/providers/${providerId}` 
                        : '/admin/providers';
                    
                    const method = providerId ? 'PUT' : 'POST';
                    
                    const response = await fetch(url, {
                        method: method,
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify(providerData),
                    });
                    
                    if (!response.ok) {
                        const errorData = await response.json();
                        throw new Error(errorData.error || `HTTP error! Status: ${response.status}`);
                    }
                    
                    // Refresh providers list
                    await fetchProviders();
                    
                    providerModal.hide();
                    showNotification(`Provider ${providerId ? 'updated' : 'created'} successfully`, 'success');
                } catch (error) {
                    console.error('Error saving provider:', error);
                    showNotification(`Error saving provider: ${error.message}`, 'error');
                }
            }
            
            // Delete provider
            async function deleteProvider(providerId) {
                try {
                    const response = await fetch(`/admin/providers/${providerId}`, {
                        method: 'DELETE',
                    });
                    
                    if (!response.ok) {
                        const errorData = await response.json();
                        throw new Error(errorData.error || `HTTP error! Status: ${response.status}`);
                    }
                    
                    // Remove from providers array
                    providers = providers.filter(provider => provider.id !== providerId);
                    applyFilters();
                    
                    deleteModal.hide();
                    showNotification('Provider deleted successfully', 'success');
                } catch (error) {
                    console.error('Error deleting provider:', error);
                    deleteModal.hide();
                    showNotification(`Error deleting provider: ${error.message}`, 'error');
                }
            }
            
            // Toggle provider suspension
            async function toggleProviderSuspension(providerId, reason = '') {
                try {
                    console.log("Toggling suspension for provider:", providerId, "with reason:", reason);
                    
                    // Find provider to determine current suspension status
                    const provider = providers.find(p => p.id === providerId);
                    if (!provider) {
                        throw new Error('Provider not found');
                    }
                    
                    const action = provider.is_suspended ? 'activate' : 'suspend';
                    console.log("Action:", action);
                    
                    const response = await fetch(`/admin/providers/${providerId}/${action}`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({ reason }),
                        credentials: 'same-origin' // Important for sending cookies/session
                    });
                    
                    console.log("Response status:", response.status);
                    
                    // Check if response is ok
                    if (!response.ok) {
                        const errorData = await response.json();
                        throw new Error(errorData.error || `HTTP error! Status: ${response.status}`);
                    }
                    
                    // Update provider in the array
                    const updatedProvider = await response.json();
                    console.log("Updated provider:", updatedProvider);
                    
                    const index = providers.findIndex(p => p.id === providerId);
                    if (index !== -1) {
                        providers[index] = updatedProvider;
                    }
                    
                    applyFilters();
                    
                    suspendModal.hide();
                    showNotification(`Provider ${action === 'suspend' ? 'suspended' : 'activated'} successfully`, 'success');
                } catch (error) {
                    console.error(`Error toggling provider suspension:`, error);
                    suspendModal.hide();
                    showNotification(`Error: ${error.message}`, 'error');
                }
            }
            
            // Show notification
            function showNotification(message, type = 'success') {
                const notification = document.getElementById('notification');
                const notificationMessage = document.getElementById('notification-message');
                
                notification.className = 'notification';
                notification.classList.add(`notification-${type}`);
                notificationMessage.textContent = message;
                
                notification.classList.add('show');
                
                setTimeout(() => {
                    notification.classList.remove('show');
                }, 5000);
            }
            
            // Make functions available globally
            window.editProvider = async function(providerId) {
                try {
                    const response = await fetch(`/admin/providers/${providerId}`);
                    if (!response.ok) {
                        throw new Error(`HTTP error! Status: ${response.status}`);
                    }
                    
                    const provider = await response.json();
                    
                    modalTitle.textContent = 'Edit Service Provider';
                    document.getElementById('provider-id').value = provider.id;
                    document.getElementById('username').value = provider.username;
                    document.getElementById('email').value = provider.email;
                    document.getElementById('first_name').value = provider.first_name;
                    document.getElementById('last_name').value = provider.last_name;
                    document.getElementById('contact_number').value = provider.contact_number;
                    document.getElementById('provider_type').value = provider.provider_type;
                    document.getElementById('gender').value = provider.gender;
                    document.getElementById('date_of_birth').value = provider.date_of_birth ? new Date(provider.date_of_birth).toISOString().split('T')[0] : '';
                    document.getElementById('address').value = provider.address || '';
                    document.getElementById('nationality').value = provider.nationality || '';
                    
                    // Password is not required when editing
                    document.getElementById('password').required = false;
                    document.getElementById('password-fields').style.display = 'block';
                    
                    providerModal.show();
                } catch (error) {
                    console.error('Error fetching provider details:', error);
                    showNotification(`Error fetching provider details: ${error.message}`, 'error');
                }
            };
            
            window.confirmDeleteProvider = function(providerId) {
                currentProviderId = providerId;
                deleteModal.show();
            };
            
            window.confirmSuspendProvider = function(providerId) {
                console.log("Confirming suspension for provider:", providerId);
                currentProviderId = providerId;
                suspendModalTitle.textContent = 'Suspend Provider';
                suspendModalMessage.textContent = 'Are you sure you want to suspend this provider? They will not be able to log in or provide services while suspended.';
                document.getElementById('confirm-suspend').textContent = 'Suspend';
                document.getElementById('confirm-suspend').className = 'btn btn-warning';
                document.getElementById('suspension-reason').value = '';
                document.getElementById('suspension-reason').parentElement.style.display = 'block';
                suspendModal.show();
            };
            
            window.confirmActivateProvider = function(providerId) {
                console.log("Confirming activation for provider:", providerId);
                currentProviderId = providerId;
                suspendModalTitle.textContent = 'Activate Provider';
                suspendModalMessage.textContent = 'Are you sure you want to activate this provider? They will be able to log in and provide services again.';
                document.getElementById('confirm-suspend').textContent = 'Activate';
                document.getElementById('confirm-suspend').className = 'btn btn-success';
                document.getElementById('suspension-reason').parentElement.style.display = 'none';
                suspendModal.show();
            };
        });
    </script>
</body>
</html>
